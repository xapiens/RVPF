/** Related Values Processing Framework.
 *
 * Copyright (c) 2003-2019 Serge Brisson.
 *
 * This software is distributable under the LGPL license.
 * See details at the bottom of this file.
 *
 * $Id: TransformEntity.java 4078 2019-06-11 20:55:00Z SFB $
 */

package org.rvpf.metadata.entity;

import java.util.Collections;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

import javax.annotation.CheckReturnValue;
import javax.annotation.Nonnull;
import javax.annotation.Nullable;

import org.rvpf.base.Params;
import org.rvpf.base.PointRelation;
import org.rvpf.base.UUID;
import org.rvpf.base.tool.Require;
import org.rvpf.base.util.container.KeyedGroups;
import org.rvpf.config.entity.ClassDefEntity;
import org.rvpf.metadata.Metadata;
import org.rvpf.metadata.Proxied;
import org.rvpf.metadata.Text;
import org.rvpf.metadata.processor.Engine;
import org.rvpf.metadata.processor.Transform;

/**
 * Transform entity.
 *
 * <p>Instances of this class act as proxy for objects implementing the
 * {@link Transform} interface.</p>
 */
public final class TransformEntity
    extends ProxyEntity
{
    /**
     * Constructs an instance.
     *
     * @param name The optional entity name.
     * @param uuid The optional entity UUID.
     * @param attributes The optional attributes.
     * @param texts The optional texts.
     * @param params The optional params.
     * @param classDef The optional class definition.
     * @param instance The optional proxied instance.
     * @param engineEntity The engine entity.
     * @param args The arguments (signature).
     */
    protected TransformEntity(
            @Nonnull final Optional<String> name,
            @Nonnull final Optional<UUID> uuid,
            @Nonnull final Optional<KeyedGroups> attributes,
            @Nonnull final Optional<Map<String, Text>> texts,
            @Nonnull final Optional<Params> params,
            @Nonnull final Optional<ClassDefEntity> classDef,
            @Nonnull final Optional<Proxied> instance,
            @Nonnull final Optional<EngineEntity> engineEntity,
            @Nonnull final List<Arg> args)
    {
        super(name, uuid, attributes, texts, params, classDef, instance);

        _engineEntity = Require.notNull(engineEntity);
        _args = Require.notNull(args);
    }

    /**
     * Returns a new builder.
     *
     * @return The new builder.
     */
    @Nonnull
    @CheckReturnValue
    public static Builder newBuilder()
    {
        return new Builder();
    }

    /** {@inheritDoc}
     */
    @Override
    public TransformEntity copy()
    {
        return newBuilder().copyFrom(this).build();
    }

    /** {@inheritDoc}
     */
    @Override
    public boolean equals(final Object other)
    {
        if (this == other) {
            return true;
        }

        if (super.equals(other)) {
            final TransformEntity otherTransform = (TransformEntity) other;

            if (!Objects.equals(_args, otherTransform._args)) {
                return false;
            }

            return getEngineEntity().equals(otherTransform.getEngineEntity());
        }

        return false;
    }

    /**
     * Gets the arguments (signature).
     *
     * @return A list of {@link Arg}.
     */
    @Nonnull
    @CheckReturnValue
    public List<Arg> getArgs()
    {
        return _args;
    }

    /**
     * Gets the default (primary) behavior.
     *
     * @param relation The relation needing a primary behavior.
     *
     * @return The optional default behavior.
     */
    @Nonnull
    @CheckReturnValue
    public Optional<BehaviorEntity> getDefaultBehavior(
            final PointRelation relation)
    {
        final Engine engine = (Engine) getEngineEntity()
            .get()
            .getInstance()
            .get();

        return engine.getDefaultBehavior(relation);
    }

    /** {@inheritDoc}
     */
    @Override
    public String getElementName()
    {
        return ELEMENT_NAME;
    }

    /**
     * Gets the engine entity.
     *
     * @return The optional engine Entity.
     */
    @Nonnull
    @CheckReturnValue
    public Optional<EngineEntity> getEngineEntity()
    {
        return _engineEntity;
    }

    /** {@inheritDoc}
     */
    @Override
    public String getPrefix()
    {
        return ENTITY_PREFIX;
    }

    /** {@inheritDoc}
     */
    @Override
    public String getReferenceName()
    {
        return ENTITY_REFERENCE_NAME;
    }

    /**
     * Gets the actual transform instance, as generated by the engine.
     *
     * @return The transform instance (null on failure).
     */
    @Nullable
    @CheckReturnValue
    public Transform getTransform()
    {
        Transform transform = (Transform) getInstance().orElse(null);

        if (transform == null) {
            final Engine engine = (Engine) getEngineEntity()
                .get()
                .getInstance()
                .get();

            transform = engine.createTransform(this);

            if (transform != null) {
                setInstance(transform);
            } else {
                clearInstance();
            }
        }

        return transform;
    }

    /** {@inheritDoc}
     */
    @Override
    public int hashCode()
    {
        return super.hashCode();
    }

    /**
     * Sets up this transform.
     *
     * <p>This means making sure that its engine is ready for action.</p>
     *
     * @param metadata The metadata.
     *
     * @return False on failure.
     */
    @Override
    public boolean setUp(final Metadata metadata)
    {
        return _engineEntity.get().setUp(metadata);
    }

    /**
     * Tears down what has been set up.
     */
    @Override
    public void tearDown()
    {
        super.tearDown();
        _engineEntity.get().tearDown();
    }

    List<Arg> _getArgs()
    {
        return _args;
    }

    /** Transform element name. */
    public static final String ELEMENT_NAME = "Transform";

    /** Transform entity prefix. */
    public static final String ENTITY_PREFIX = "T";

    /** Transform entity reference name. */
    public static final String ENTITY_REFERENCE_NAME = "transform";

    private final List<Arg> _args;
    private final Optional<EngineEntity> _engineEntity;

    /**
     * Transform arg.
     */
    public static class Arg
    {
        /**
         * Constructs an instance.
         *
         * @param behaviorEntities The behavior entities.
         * @param contentEntity The optional content entity.
         * @param syncEntity The optional sync entity.
         * @param multiple True if multiple.
         * @param params The optional params.
         */
        Arg(
                @Nonnull final List<BehaviorEntity> behaviorEntities,
                @Nonnull final Optional<ContentEntity> contentEntity,
                @Nonnull final Optional<SyncEntity> syncEntity,
                final boolean multiple,
                @Nonnull final Optional<Params> params)
        {
            _behaviorEntities = behaviorEntities;
            _contentEntity = contentEntity;
            _syncEntity = syncEntity;
            _multiple = multiple;
            _params = params;
        }

        /**
         * Returns a new builder.
         *
         * @return The new builder.
         */
        @Nonnull
        @CheckReturnValue
        public static Builder newBuilder()
        {
            return new Builder();
        }

        /** {@inheritDoc}
         */
        @Override
        public boolean equals(final Object other)
        {
            if (this == other) {
                return true;
            }

            if (other instanceof Arg) {
                final Arg otherArg = (Arg) other;

                if (!getBehaviorEntities()
                    .equals(otherArg.getBehaviorEntities())) {
                    return false;
                }

                if (!_contentEntity.equals(otherArg._contentEntity)) {
                    return false;
                }

                if (!_syncEntity.equals(otherArg._syncEntity)) {
                    return false;
                }

                if (!getParams().equals(otherArg.getParams())) {
                    return false;
                }

                return _multiple == otherArg._multiple;
            }

            return false;
        }

        /**
         * Gets the behavior entities.
         *
         * @return The behavior entities.
         */
        @Nonnull
        @CheckReturnValue
        public List<BehaviorEntity> getBehaviorEntities()
        {
            return (_behaviorEntities != null)? _behaviorEntities: Collections
                .<BehaviorEntity>emptyList();
        }

        /**
         * Gets the content entity.
         *
         * @return The optional content entity.
         */
        @Nonnull
        @CheckReturnValue
        public Optional<ContentEntity> getContentEntity()
        {
            return _contentEntity;
        }

        /**
         * Gets the params.
         *
         * @return The params.
         */
        @Nonnull
        @CheckReturnValue
        public Params getParams()
        {
            return _params.isPresent()? _params.get(): Params.EMPTY_PARAMS;
        }

        /**
         * Gets the sync entity.
         *
         * @return The optional sync entity.
         */
        @Nonnull
        @CheckReturnValue
        public Optional<SyncEntity> getSyncEntity()
        {
            return _syncEntity;
        }

        /** {@inheritDoc}
         */
        @Override
        public int hashCode()
        {
            throw new UnsupportedOperationException();
        }

        /**
         * Asks if this arg allows multiple values.
         *
         * @return True when a refering input can have more than one value.
         */
        @CheckReturnValue
        public boolean isMultiple()
        {
            return _multiple;
        }

        private final List<BehaviorEntity> _behaviorEntities;
        private final Optional<ContentEntity> _contentEntity;
        private final boolean _multiple;
        private final Optional<Params> _params;
        private final Optional<SyncEntity> _syncEntity;

        /**
         * Transform arg builder.
         */
        public static final class Builder
        {
            /**
             * Adds a behavior entity.
             *
             * @param behaviorEntity The behavior entity.
             *
             * @return This.
             */
            @Nonnull
            public Builder addBehaviorEntity(
                    final BehaviorEntity behaviorEntity)
            {
                if (_behaviorEntities == null) {
                    _behaviorEntities = new LinkedList<BehaviorEntity>();
                }

                _behaviorEntities.add(behaviorEntity);

                return this;
            }

            /**
             * Builds an Arg.
             *
             * @return The new Arg.
             */
            @Nonnull
            public Arg build()
            {
                return new Arg(
                    (_behaviorEntities != null)? _behaviorEntities: Collections
                        .<BehaviorEntity>emptyList(),
                    Optional.ofNullable(_contentEntity),
                    Optional.ofNullable(_syncEntity),
                    _multiple,
                    _params);
            }

            /**
             * Sets the content entity.
             *
             * @param contentEntity The content entity.
             *
             * @return This.
             */
            @Nonnull
            public Builder setContentEntity(
                    @Nonnull final ContentEntity contentEntity)
            {
                _contentEntity = contentEntity;

                return this;
            }

            /**
             * Remembers if this arg allows multiple values.
             *
             * @param multiple True when a refering input can have more than one
             *                 value.
             *
             * @return This.
             */
            @Nonnull
            public Builder setMultiple(final boolean multiple)
            {
                _multiple = multiple;

                return this;
            }

            /**
             * Sets the params
             *
             * @param params The optional params.
             *
             * @return This.
             */
            @Nonnull
            public Builder setParams(@Nonnull final Optional<Params> params)
            {
                _params = params;

                return this;
            }

            /**
             * Sets the sync entity.
             *
             * @param syncEntity The sync entity.
             *
             * @return This.
             */
            @Nonnull
            public Builder setSyncEntity(@Nonnull final SyncEntity syncEntity)
            {
                _syncEntity = syncEntity;

                return this;
            }

            private List<BehaviorEntity> _behaviorEntities;
            private ContentEntity _contentEntity;
            private boolean _multiple;
            private Optional<Params> _params = Optional.empty();
            private SyncEntity _syncEntity;
        }
    }


    /**
     * Transform entity builder.
     */
    public static final class Builder
        extends ProxyEntity.Builder
    {
        /**
         * Constructs an instance.
         */
        Builder() {}

        /**
         * Adds an argument to the signature.
         *
         * @param arg An instance of {@link Arg}.
         *
         * @return This.
         */
        @Nonnull
        public Builder addArg(@Nonnull final Arg arg)
        {
            _args.add(arg);

            return this;
        }

        /** {@inheritDoc}
         */
        @Override
        public TransformEntity build()
        {
            return new TransformEntity(
                getName(),
                getUUID(),
                getAttributes(),
                getTexts(),
                getParams(),
                getClassDef(),
                getInstance(),
                _engineEntity,
                _args);
        }

        /**
         * Copies the values from an entity.
         *
         * @param entity The entity.
         *
         * @return This.
         */
        @Nonnull
        public Builder copyFrom(@Nonnull final TransformEntity entity)
        {
            super.copyFrom(entity);

            _engineEntity = entity.getEngineEntity();
            _args = entity._getArgs();

            return this;
        }

        /**
         * Sets the engine entity for this transform entity.
         *
         * @param engineEntity The engine entity.
         *
         * @return This.
         */
        @Nonnull
        public Builder setEngineEntity(
                @Nonnull final Optional<EngineEntity> engineEntity)
        {
            _engineEntity = engineEntity;

            return this;
        }

        private List<Arg> _args = new LinkedList<Arg>();
        private Optional<EngineEntity> _engineEntity = Optional.empty();
    }
}

/* This is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 * 02110-1301, USA
 */
